% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/container.R
\name{UIContainer}
\alias{UIContainer}
\title{Generate UITables}
\usage{
UIContainer(data, opt = NULL, .resetCfg = TRUE, env = parent.frame())
}
\arguments{
\item{data}{A Data Structure}
}
\value{
An object containing a list of UITables and the original data
}
\description{
Generates a list of UITables with a configuration object
}
\section{Slots}{

\describe{
\item{\code{data}}{The original data used to generate the \code{\link{UITable}}}

\item{\code{tables}}{A list of \code{\link{UITable}}}
}}

\section{Data Structure}{

An R nested list with the flowing structure.
It is recommended to use yaml and import it into R with \code{\link{read_yaml}}

\if{html}{\out{<div class="sourceCode yaml">}}\preformatted{<TableName>:
  tab:
    title: <TableName>
    [value: null]
    [icon: <Icon of the tab>]
  con: <SQL connection>
  name: <SQL table name>
  id: <HTML ID of table>
  [types:
    <HTML input/select types>[...]]
  opt: <option object>
  [rows:
    <row name>:
      [width: <css width not implemented>]
      input: <html input/select override>
    <row name>:
      [width: <css width not implemented>]
      input:
        [con: <SQL connection>]
        table: <SQL Table>
        key: <SQL column to use as a key>
        val: <SQL column to use as a value>
      [...]]
    [js: <not implemented>]
    [tbl: <function to modify the table>]
    keys: <Primary keys of the table>
  [...]
}\if{html}{\out{</div>}}
}

\examples{
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#

library(DBI)
library(pool)
library(tidyverse)
library(ShinySQLBrowser)

mydb = dbPool(drv = RSQLite::SQLite(), dbname =":memory:")
mtcars|>
	as_tibble()|>
	mutate(car = rownames(mtcars), id = row_number(car))|>
	dbWriteTable(mydb, "mtcars", value = _)

data = yaml::read_yaml("config.yaml")
container = UIContainer(data$tables, data)

# Define UI for application that creates a user interface for SQL tables
ui = bootstrapPage(
	theme = bslib::bs_theme(version = 4),
	includeUITable(container)
)


# Define server logic to render the tables and allow interactivity
server = function(input, output, session) {
	observeSwitch(session, input, container) # , .onClickOff = "discard"

	onSessionEnded(function(){
		message("Closing pools")
		poolClose(mydb)
	})
}

# Run the this integrated applicatopn
shinyApp(ui = ui, server = server)
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
# Note: The data used is not currently published

library(DBI)
library(odbc)
library(tidyverse)
library(dbplyr)
library(pool)
library(shiny)
library(shinyjs)
library(ShinySQLBrowser)

user = 'root'
password = "RayLVM"

CookLog <- dbPool(
  drv = RMariaDB::MariaDB(),
  password = password,
  user = user,
  dbname = 'CookLog'
)

SaladLog <- dbPool(
  drv = RMariaDB::MariaDB(),
  password = password,
  user = user,
  dbname = 'SaladLog'
)

Work <- dbPool(
  drv = RMariaDB::MariaDB(),
  password = password,
  user = user,
  dbname = 'Work'
)

cookFilter = function(con, name){
  dplyr::tbl(con, name)|>
    #filter(Date==lubridate::today()-3)|>
    as_tibble()
}
data = yaml::read_yaml("config.yaml")
container = UIContainer(data$tables, data)


# Define UI for application that creates a user interface for SQL tables
ui = bootstrapPage(
    theme = bslib::bs_theme(version = 4),
    includeUITable(container)
)


# Define server logic to render the tables and allow interactivity
server = function(input, output, session) {
  observeSwitch(session, input, container)

  onSessionEnded(function(){
    message("Closing pools")
    poolClose(Work)
    poolClose(CookLog)
    poolClose(SaladLog)
    if(commandArgs()[1]!="RStudio")quit(save = "no")
  })
}

# Run the this integrated applicatopn
shinyApp(ui = ui, server = server)
}
